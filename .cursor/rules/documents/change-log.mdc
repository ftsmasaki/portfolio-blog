---
alwaysApply: true
---

# チェンジログ作成ルール

## トリガー
コードの変更が完了したら、必ずチェンジログを作成すること。

## ファイル形式
Markdown（.md）

## 作成場所
`/change-log/` 内の本日の日付ディレクトリ

**重要**: チェンジログ作成前に必ず現在の日付を取得すること
```bash
# 現在の日付を取得
CURRENT_DATE=$(date +"%Y-%m-%d")
echo "今日の日付: $CURRENT_DATE"
```

## 命名規則
- ファイル名の先頭に時刻のプレフィックスを24時間形式で記述
- 変更内容を小英字のケバブケースで記述
- プレフィックスと変更内容はアンダースコアで区切る
- 実装計画書の文脈で実装された場合はファイル名末尾にフェーズ番号を記述

**重要**: チェンジログ作成前に必ず現在の時刻を取得すること
```bash
# 現在の時刻を取得
CURRENT_TIME=$(date +"%H-%M")
echo "現在の時刻: $CURRENT_TIME"
```

**完全な手順**:
1. 現在の日付を取得: `date +"%Y-%m-%d"`
2. 現在の時刻を取得: `date +"%H-%M"`
3. 適切なディレクトリを確認: `ls change-log/`
4. ファイル名を生成: `{時刻}_{変更内容}-phase{番号}.md`

例: `16-57_plan-limit-management-phase1.md`

## チェンジログの内容構成
各チェンジログファイルには以下の項目を必ず含めること：

### 1. 何を (What)
- 実装した機能や修正した内容の概要
- 変更されたファイルや機能の一覧

### 2. どんな目的で (Why)
- 変更を行った理由
- 解決したい課題や要求事項

### 3. どう変更したか (How)
- 具体的な実装方法
- 使用した技術やライブラリ
- 重要なコードの変更点
- **コードブロックではなく、自然言語による説明を重視**
  - コードの全文を記載するのではなく、実装の意図や挙動を簡潔に説明
  - 関数の目的、処理の流れ、重要なポイントを文章で記述
  - 必要に応じてコードの一部を引用することは可能（10行程度が目安）

### 4. 考えられる影響と範囲
- 既存機能への影響
- ユーザーエクスペリエンスへの影響
- パフォーマンスへの影響

### 5. 課題
- 今後の改善点
- 未解決の問題
- 追加で必要な作業

## 注意事項
- チェンジログは日本語で記述すること
- 他の開発者が理解しやすい内容にすること
- コード変更の度に必ず作成すること
- **コードよりも自然言語による説明を重視**
  - 実装内容を簡潔に説明し、コードの詳細は最小限に
  - 実装の目的や意図、処理の流れを自然言語で記述
  - コードブロックは必要な場合のみ、簡潔に（10行程度が目安）

## 🚨 チェンジログ作成時の必須手順

**絶対に守ること**:
1. **日付・時刻の取得を忘れない**
   ```bash
   # 現在の日付を取得
   CURRENT_DATE=$(date +"%Y-%m-%d")
   
   # 現在の時刻を取得
   CURRENT_TIME=$(date +"%H-%M")
   
   # 確認
   echo "日付: $CURRENT_DATE, 時刻: $CURRENT_TIME"
   ```

2. **既存ディレクトリの確認**
   ```bash
   # 既存のディレクトリを確認
   ls change-log/
   ```

3. **推測で日付・時刻を決めない**
   - 必ず `date` コマンドで現在の日時を取得
   - 間違った日付（2025-01-21など）でディレクトリを作成しない

4. **ファイル名の正確性**
   - 取得した時刻を使用: `{CURRENT_TIME}_{変更内容}-phase{番号}.md`
   - 取得した日付のディレクトリを使用: `change-log/{CURRENT_DATE}/`

## コミットメッセージ
- コミットメッセージは簡潔に記述すること
- 日本語で記述すること

**コミットメッセージの例**
```
feat: ファイルリストに検索機能を追加

- ファイル名でのリアルタイム検索機能を実装
- レスポンシブ対応の検索バーコンポーネントを作成
- TanStack Tableのフィルタリング機能を活用
- 検索バーにクリアボタンを追加
```