---
description: 実装の実施時に実行してください
alwaysApply: true
triggers: ["実装開始！！！"]
---

# 実装計画書に基づく実装作業ルール
このファイルを参照したら「おっしゃ！！！実装を始めるぜー！！！！！！！！！🏋️‍♂️」と言って作業を開始してください。

## 概要

実装計画書に基づいて実装を進める際の作業フローとルールを定義します。
段階的な実装とユーザー確認を通じて、品質の高い実装を実現することを目的とします。

## 基本原則

### 1. サブフェーズ単位での実装

実装計画書に記載されたサブフェーズ単位で実装を進めること。

**例:**
- フェーズ 1.1: XX機能の実装
- フェーズ 1.2: XX機能のテスト
- フェーズ 2.1: YY機能の実装
- フェーズ 2.2: YY機能のテスト

### 2. ユーザー確認の必須化

**各サブフェーズ完了後、必ずユーザーに動作確認を求めること。**

これは実装計画書作成ルール（`implementation-plan.mdc`）で定義された以下の手順に従うものです：

```
1. 実装: コードの実装
2. ユーザー動作確認: 実装内容をユーザーが確認（必ず手を止める）
3. 型チェック: TypeScriptの型エラーを確認・修正
4. テスト作成: 実装した機能のテストを作成
5. 再度の型チェック: テスト追加後の型エラーを確認・修正
6. リントエラー修正: ESLintエラーを修正
7. チェンジログの作成: 各フェーズごとにチェンジログを作成
```

### 3. 次フェーズへの移行条件

ユーザーから明示的な指示または承認を受けてから次のサブフェーズに着手すること。

**承認の例:**
- 「次に進んでください」
- 「OK、続けて」
- 「問題ありません、次のフェーズをお願いします」

## 実装作業フロー

### 実装作業の反復サイクル（全体像）

実装計画書に基づく作業は、以下の反復サイクルで進行します：

\`\`\`mermaid
graph LR
    A[実装計画書を読む] --> B[フェーズXを実装]
    B --> C[型チェック実施]
    C --> D{エラー?}
    D -->|Yes| B
    D -->|No| E[チェンジログ作成]
    E --> F[実装計画書を更新<br/>✅完了マーク]
    F --> G{次フェーズあり?}
    G -->|Yes| A
    G -->|No| H[完了]
    
    style A fill:#e1f5ff,stroke:#01579b,stroke-width:2px,color:#000000
    style B fill:#fff9c4,stroke:#f57f17,stroke-width:2px,color:#000000
    style C fill:#e1bee7,stroke:#7b1fa2,stroke-width:2px,color:#000000
    style D fill:#ffcdd2,stroke:#d32f2f,stroke-width:2px,color:#000000
    style E fill:#c8e6c9,stroke:#2e7d32,stroke-width:2px,color:#000000
    style F fill:#c8e6c9,stroke:#2e7d32,stroke-width:2px,color:#000000
    style G fill:#fff9c4,stroke:#f57f17,stroke-width:2px,color:#000000
    style H fill:#81c784,stroke:#388e3c,stroke-width:3px,color:#000000
\`\`\`

### ステップ1: サブフェーズの実装開始

1. 実装計画書の該当サブフェーズを確認
2. 実装内容と完了条件を理解
3. コードの実装を開始

### ステップ2: サブフェーズの実装完了

1. コードの実装を完了
2. 型チェックを実施（`yarn tsc --noEmit`）
3. 型エラーがあれば修正

### ステップ3: ユーザー動作確認の依頼

**必ず手を止めて、ユーザーに以下を報告すること:**

```markdown
## フェーズ X.Y: [サブフェーズ名] の実装が完了しました

### 実装内容
- [実装した内容1]
- [実装した内容2]
- [実装した内容3]

### 変更ファイル
- `path/to/file1.ts`
- `path/to/file2.tsx`

### 動作確認のお願い
実装内容をご確認いただき、問題がなければ次のステップ（テスト作成/次のフェーズ）に進みます。

### 推奨コミットメッセージ
```
<type>: <subject>

- [変更内容1]
- [変更内容2]
- [変更内容3]
```
```

### ステップ4: ユーザー確認待ち

ユーザーからの応答を待つこと。この間は次の作業に着手しない。

### ステップ5: フィードバック対応（必要に応じて）

ユーザーから修正依頼があった場合：
1. 指摘事項を確認
2. 修正を実施
3. 再度ユーザー確認を依頼

### ステップ6: 次ステップへの移行

ユーザーから承認を得たら：
1. テスト作成フェーズの場合：テストを作成
2. 次のサブフェーズの場合：ステップ1に戻る
3. 全フェーズ完了の場合：最終確認とチェンジログ作成

## 禁止事項

### ❌ 一気通貫での実装

**絶対に禁止**: ユーザーの確認なしに複数のサブフェーズを一気に実装すること

**NG例:**
```
フェーズ 1.1 XX機能の実装
↓ ユーザー確認なし
フェーズ 1.2 XX機能のテスト
↓ ユーザー確認なし
フェーズ 2.1 YY機能の実装
```

**OK例:**
```
フェーズ 1.1 XX機能の実装
↓ ユーザー確認を待つ ✅
↓ ユーザーから承認を得る
フェーズ 1.2 XX機能のテスト
↓ ユーザー確認を待つ ✅
↓ ユーザーから承認を得る
フェーズ 2.1 YY機能の実装
```

### ❌ 確認スキップ

**絶対に禁止**: ユーザー確認を省略して次のフェーズに進むこと

### ❌ 勝手な判断での実装変更

**絶対に禁止**: 実装計画書の内容を無断で変更すること

計画の変更が必要な場合は、ユーザーに相談すること。

## 各フェーズでの作業内容

### 実装フェーズ（X.1）

1. コードの実装
2. 型チェック（`yarn tsc --noEmit`）
3. 型エラー修正
4. **ユーザー動作確認の依頼（必須）**

### テストフェーズ（X.2）

1. テストコードの作成
2. テスト実行（`yarn test`）
3. テストがパスすることを確認
4. 型チェック（`yarn tsc --noEmit`）
5. 型エラー修正
6. リントエラー修正（`yarn lint`）
7. チェンジログの作成
8. **ユーザー動作確認の依頼（必須）**

## フェーズ完了条件の確認

各サブフェーズ完了時、実装計画書に記載された完了条件を満たしていることを確認すること。

**例:**
```markdown
**✅ フェーズ 1.1完了条件**: 
- 実装が完了していること
- 型エラーが0件であること
- ユーザーの動作確認が完了していること
```

## エラー発生時の対応

### 型エラーが発生した場合

1. エラー内容を確認
2. 修正を実施
3. 再度型チェックを実施
4. エラーが解消されるまで繰り返す

### テストが失敗した場合

1. 失敗理由を確認
2. コードまたはテストを修正
3. 再度テストを実行
4. 全てのテストがパスするまで繰り返す

### リントエラーが発生した場合

1. エラー内容を確認
2. 修正を実施（必要に応じて`yarn lint --fix`）
3. 再度リントチェックを実施
4. エラーが解消されるまで繰り返す

## コミットとプッシュ

### コミットタイミング

各サブフェーズ完了後にコミットを実施すること：
1. 実装フェーズ完了後
2. テストフェーズ完了後
3. チェンジログ作成後

**重要**: 各サブフェーズ完了時の動作確認報告において、必ずコミットメッセージを提案すること。

### コミットメッセージ形式

**基本形式:**
```
<type>: <subject>

<body>
```

**Type一覧:**
- `feat`: 新機能の追加
- `fix`: バグ修正
- `docs`: ドキュメントのみの変更
- `style`: コードの意味に影響を与えない変更（空白、フォーマット等）
- `refactor`: リファクタリング
- `test`: テストの追加・修正
- `chore`: ビルドプロセスやツールの変更

**コミットメッセージの例:**
```
feat: プラン制限管理機能の実装

- プラン制限データスキーマの定義
- プラン制限バリデーション関数の実装
- 型定義の追加
```

### コミットメッセージの提案ルール

各サブフェーズ完了時の動作確認報告において、以下の形式でコミットメッセージを提案すること：

**提案時の考慮事項:**
1. **適切なtype**: 実装内容に応じた適切なtypeを選択
2. **簡潔なsubject**: 何を実装したかが一目でわかる見出し
3. **具体的なbody**: 実装した内容の箇条書きリスト
4. **フェーズ情報**: 実装計画書のフェーズ番号を含める（該当する場合）

**実装フェーズの提案例:**
```
feat: [フェーズ1.1] プラン制限データスキーマの実装

- プラン制限データの型定義を追加
- Zodスキーマの実装
- デフォルト値の定義
```

**テストフェーズの提案例:**
```
test: [フェーズ1.2] プラン制限データスキーマのテスト追加

- スキーマバリデーションのテストを実装
- エラーケースのテストを追加
- テストカバレッジ100%達成
```

### プッシュタイミング

**推奨タイミング:**
- 各フェーズ完了後
- 1日の作業終了時
- ユーザー確認後

**注意事項:**
- プッシュ前に必ず型チェック・テスト・リントを実施
- コンフリクトが発生した場合は適切に解決

## 実装時の注意点

### コードの品質

**必須事項:**
- TypeScriptの型を適切に定義
- エラーハンドリングを実装
- TSDoc形式のコメントを記述
- 単一責任の原則を遵守

**禁止事項:**
- `any`型の使用（やむを得ない場合を除く）
- `console.log`のままコミット（デバッグ用は削除）
- 未使用のインポート・変数の残存

### パフォーマンス

**考慮事項:**
- 不要な再レンダリングを避ける
- 適切なメモ化（useMemo, useCallback）
- データベースクエリの最適化
- 適切なインデックスの使用

### セキュリティ

**必須チェック:**
- 認証・認可の適切な実装
- バリデーションの実施
- XSS対策
- CSRF対策
- SQLインジェクション対策

### アクセシビリティ

**必須実装:**
- セマンティックなHTML要素の使用
- 適切なARIAラベル
- キーボードナビゲーション
- 色のコントラスト比の確保

## 実装完了後のチェックリスト

### コード品質
- [ ] 型エラーが0件
- [ ] テストが全てパス
- [ ] リントエラーが0件
- [ ] TSDocコメントが記述されている
- [ ] 未使用のコードが削除されている

### 機能
- [ ] 実装計画書の要件を満たしている
- [ ] エラーハンドリングが適切
- [ ] バリデーションが実装されている
- [ ] レスポンシブデザイン対応

### セキュリティ
- [ ] 認証・認可が適切
- [ ] バリデーションが実施されている
- [ ] XSS/CSRF対策が実装されている

### パフォーマンス
- [ ] 不要な再レンダリングがない
- [ ] データベースクエリが最適化されている
- [ ] 画像が最適化されている

### ドキュメント
- [ ] チェンジログが作成されている
- [ ] TSDocコメントが記述されている
- [ ] 必要に応じてREADMEが更新されている

### Git
- [ ] 適切なコミットメッセージ
- [ ] プッシュ前の最終チェック完了

##  AIへの指示

このセクションは、AI（あなた自身）が実装作業を効率的に進めるためのガイドラインです。

### 基本作業フロー

各フェーズで以下を厳守してください：

1. **実装計画書の該当フェーズを読む**
   - フェーズの目的を理解
   - 実装内容を確認
   - 完了条件を把握

2. **実装を実施**
   - 該当ファイルを読み込み
   - コードを実装（追加・修正・削除）
   - 変更内容をユーザーに報告

3. **型チェックを実施**
   \`\`\`bash
   cd app && npx tsc --noEmit
   \`\`\`
   - エラーがあれば修正
   - エラーが0件になるまで繰り返す

4. **チェンジログを作成**
   - `.cursor/rules/documents/change-log.mdc` のルールに従う

5. **実装計画書を更新**
   - 該当フェーズに ✅ マークを付与
   - 次フェーズの存在を確認

6. **ユーザーに報告**
   - 完了したフェーズ
   - チェンジログの場所
   - 次フェーズへの進行確認

### 🚨 重要な注意事項

- **ユーザー確認なしに次フェーズに進まない**
- **各フェーズ完了後、必ず型チェック**
- **チェンジログは必ず作成**
- **バックスラッシュのエスケープに注意**（markdown内のコードブロック）
- **Mermaid図内のバッククォートは必ずエスケープ**（\\\`\\\`\\\`）

### 報告フォーマット

フェーズ完了時、以下の形式でユーザーに報告してください：

\`\`\`markdown
## ✅ フェーズ X.Y: [フェーズ名] 完了

### 実装内容
- [実装した内容1]
- [実装した内容2]

### 変更ファイル
- \`path/to/file1.ts\` (XX行 → YY行)
- \`path/to/file2.ts\` (追加)

### 型チェック結果
✅ エラー0件

### チェンジログ
\`change-log/YYYY-MM-DD/HH-MM_[変更内容]-phaseX.md\`

### 次のアクション
フェーズ X.Y+1 に進みますか？
\`\`\`

### エラー発生時の対応

#### 型エラーが発生した場合
1. エラー内容を確認
2. 該当箇所を修正
3. 再度型チェック
4. 解消まで繰り返す

#### Markdown構文エラーが発生した場合
1. バッククォートのエスケープを確認
2. Mermaid図内の特殊文字をエスケープ
3. 再度ファイルを確認

### 作業の優先順位

1. 🔴 **最優先**: 型エラーの解消
2. 🟡 **高優先**: チェンジログの作成
3. 🟢 **中優先**: 実装計画書の更新
4. ⚪ **低優先**: コード最適化

## 参考資料

### 実装関連
- [実装計画書作成ルール](../documents/implementation-plan.mdc)
- [プラン制限管理機能実装計画書](../../docs/implementation-plan/plan-limit-management-implementation-plan.md)
- [テーブル設計参照ルール](./models-single-source-of-truth.mdc)

### フロントエンド
- [フロントエンドコーディング規約](../frontend/common.mdc)
- [フロントエンドページ実装ルール](../frontend/page-implementation.mdc)
- [フォーム実装ルール](../frontend/form-implementation.mdc)

### テスト
- [テストファイル作成ルール](./testing.mdc)

### ドキュメント
- [チェンジログ作成ルール](../documents/change-log.mdc)